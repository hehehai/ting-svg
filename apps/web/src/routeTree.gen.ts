/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as OptimizeRouteImport } from './routes/optimize'
import { Route as AboutRouteImport } from './routes/about'
import { Route as BlogRouteRouteImport } from './routes/blog/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as BlogIndexRouteImport } from './routes/blog/index'
import { Route as BlogSlugRouteImport } from './routes/blog/$slug'

const OptimizeRoute = OptimizeRouteImport.update({
  id: '/optimize',
  path: '/optimize',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const BlogRouteRoute = BlogRouteRouteImport.update({
  id: '/blog',
  path: '/blog',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const BlogIndexRoute = BlogIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => BlogRouteRoute,
} as any)
const BlogSlugRoute = BlogSlugRouteImport.update({
  id: '/$slug',
  path: '/$slug',
  getParentRoute: () => BlogRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/blog': typeof BlogRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/optimize': typeof OptimizeRoute
  '/blog/$slug': typeof BlogSlugRoute
  '/blog/': typeof BlogIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/optimize': typeof OptimizeRoute
  '/blog/$slug': typeof BlogSlugRoute
  '/blog': typeof BlogIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/blog': typeof BlogRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/optimize': typeof OptimizeRoute
  '/blog/$slug': typeof BlogSlugRoute
  '/blog/': typeof BlogIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/blog' | '/about' | '/optimize' | '/blog/$slug' | '/blog/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/about' | '/optimize' | '/blog/$slug' | '/blog'
  id:
    | '__root__'
    | '/'
    | '/blog'
    | '/about'
    | '/optimize'
    | '/blog/$slug'
    | '/blog/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BlogRouteRoute: typeof BlogRouteRouteWithChildren
  AboutRoute: typeof AboutRoute
  OptimizeRoute: typeof OptimizeRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/optimize': {
      id: '/optimize'
      path: '/optimize'
      fullPath: '/optimize'
      preLoaderRoute: typeof OptimizeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blog': {
      id: '/blog'
      path: '/blog'
      fullPath: '/blog'
      preLoaderRoute: typeof BlogRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blog/': {
      id: '/blog/'
      path: '/'
      fullPath: '/blog/'
      preLoaderRoute: typeof BlogIndexRouteImport
      parentRoute: typeof BlogRouteRoute
    }
    '/blog/$slug': {
      id: '/blog/$slug'
      path: '/$slug'
      fullPath: '/blog/$slug'
      preLoaderRoute: typeof BlogSlugRouteImport
      parentRoute: typeof BlogRouteRoute
    }
  }
}

interface BlogRouteRouteChildren {
  BlogSlugRoute: typeof BlogSlugRoute
  BlogIndexRoute: typeof BlogIndexRoute
}

const BlogRouteRouteChildren: BlogRouteRouteChildren = {
  BlogSlugRoute: BlogSlugRoute,
  BlogIndexRoute: BlogIndexRoute,
}

const BlogRouteRouteWithChildren = BlogRouteRoute._addFileChildren(
  BlogRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BlogRouteRoute: BlogRouteRouteWithChildren,
  AboutRoute: AboutRoute,
  OptimizeRoute: OptimizeRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
