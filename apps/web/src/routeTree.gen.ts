/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as Char123LocaleChar125RouteRouteImport } from './routes/{-$locale}/route'
import { Route as Char123LocaleChar125IndexRouteImport } from './routes/{-$locale}/index'
import { Route as Char123LocaleChar125OptimizeRouteImport } from './routes/{-$locale}/optimize'
import { Route as Char123LocaleChar125AboutRouteImport } from './routes/{-$locale}/about'
import { Route as Char123LocaleChar125BlogRouteRouteImport } from './routes/{-$locale}/blog/route'
import { Route as Char123LocaleChar125BlogIndexRouteImport } from './routes/{-$locale}/blog/index'
import { Route as Char123LocaleChar125BlogSlugRouteImport } from './routes/{-$locale}/blog/$slug'

const Char123LocaleChar125RouteRoute =
  Char123LocaleChar125RouteRouteImport.update({
    id: '/{-$locale}',
    path: '/{-$locale}',
    getParentRoute: () => rootRouteImport,
  } as any)
const Char123LocaleChar125IndexRoute =
  Char123LocaleChar125IndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => Char123LocaleChar125RouteRoute,
  } as any)
const Char123LocaleChar125OptimizeRoute =
  Char123LocaleChar125OptimizeRouteImport.update({
    id: '/optimize',
    path: '/optimize',
    getParentRoute: () => Char123LocaleChar125RouteRoute,
  } as any)
const Char123LocaleChar125AboutRoute =
  Char123LocaleChar125AboutRouteImport.update({
    id: '/about',
    path: '/about',
    getParentRoute: () => Char123LocaleChar125RouteRoute,
  } as any)
const Char123LocaleChar125BlogRouteRoute =
  Char123LocaleChar125BlogRouteRouteImport.update({
    id: '/blog',
    path: '/blog',
    getParentRoute: () => Char123LocaleChar125RouteRoute,
  } as any)
const Char123LocaleChar125BlogIndexRoute =
  Char123LocaleChar125BlogIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => Char123LocaleChar125BlogRouteRoute,
  } as any)
const Char123LocaleChar125BlogSlugRoute =
  Char123LocaleChar125BlogSlugRouteImport.update({
    id: '/$slug',
    path: '/$slug',
    getParentRoute: () => Char123LocaleChar125BlogRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/{-$locale}': typeof Char123LocaleChar125RouteRouteWithChildren
  '/{-$locale}/blog': typeof Char123LocaleChar125BlogRouteRouteWithChildren
  '/{-$locale}/about': typeof Char123LocaleChar125AboutRoute
  '/{-$locale}/optimize': typeof Char123LocaleChar125OptimizeRoute
  '/{-$locale}/': typeof Char123LocaleChar125IndexRoute
  '/{-$locale}/blog/$slug': typeof Char123LocaleChar125BlogSlugRoute
  '/{-$locale}/blog/': typeof Char123LocaleChar125BlogIndexRoute
}
export interface FileRoutesByTo {
  '/{-$locale}/about': typeof Char123LocaleChar125AboutRoute
  '/{-$locale}/optimize': typeof Char123LocaleChar125OptimizeRoute
  '/{-$locale}': typeof Char123LocaleChar125IndexRoute
  '/{-$locale}/blog/$slug': typeof Char123LocaleChar125BlogSlugRoute
  '/{-$locale}/blog': typeof Char123LocaleChar125BlogIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/{-$locale}': typeof Char123LocaleChar125RouteRouteWithChildren
  '/{-$locale}/blog': typeof Char123LocaleChar125BlogRouteRouteWithChildren
  '/{-$locale}/about': typeof Char123LocaleChar125AboutRoute
  '/{-$locale}/optimize': typeof Char123LocaleChar125OptimizeRoute
  '/{-$locale}/': typeof Char123LocaleChar125IndexRoute
  '/{-$locale}/blog/$slug': typeof Char123LocaleChar125BlogSlugRoute
  '/{-$locale}/blog/': typeof Char123LocaleChar125BlogIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/{-$locale}'
    | '/{-$locale}/blog'
    | '/{-$locale}/about'
    | '/{-$locale}/optimize'
    | '/{-$locale}/'
    | '/{-$locale}/blog/$slug'
    | '/{-$locale}/blog/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/{-$locale}/about'
    | '/{-$locale}/optimize'
    | '/{-$locale}'
    | '/{-$locale}/blog/$slug'
    | '/{-$locale}/blog'
  id:
    | '__root__'
    | '/{-$locale}'
    | '/{-$locale}/blog'
    | '/{-$locale}/about'
    | '/{-$locale}/optimize'
    | '/{-$locale}/'
    | '/{-$locale}/blog/$slug'
    | '/{-$locale}/blog/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  Char123LocaleChar125RouteRoute: typeof Char123LocaleChar125RouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/{-$locale}': {
      id: '/{-$locale}'
      path: '/{-$locale}'
      fullPath: '/{-$locale}'
      preLoaderRoute: typeof Char123LocaleChar125RouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/{-$locale}/': {
      id: '/{-$locale}/'
      path: '/'
      fullPath: '/{-$locale}/'
      preLoaderRoute: typeof Char123LocaleChar125IndexRouteImport
      parentRoute: typeof Char123LocaleChar125RouteRoute
    }
    '/{-$locale}/optimize': {
      id: '/{-$locale}/optimize'
      path: '/optimize'
      fullPath: '/{-$locale}/optimize'
      preLoaderRoute: typeof Char123LocaleChar125OptimizeRouteImport
      parentRoute: typeof Char123LocaleChar125RouteRoute
    }
    '/{-$locale}/about': {
      id: '/{-$locale}/about'
      path: '/about'
      fullPath: '/{-$locale}/about'
      preLoaderRoute: typeof Char123LocaleChar125AboutRouteImport
      parentRoute: typeof Char123LocaleChar125RouteRoute
    }
    '/{-$locale}/blog': {
      id: '/{-$locale}/blog'
      path: '/blog'
      fullPath: '/{-$locale}/blog'
      preLoaderRoute: typeof Char123LocaleChar125BlogRouteRouteImport
      parentRoute: typeof Char123LocaleChar125RouteRoute
    }
    '/{-$locale}/blog/': {
      id: '/{-$locale}/blog/'
      path: '/'
      fullPath: '/{-$locale}/blog/'
      preLoaderRoute: typeof Char123LocaleChar125BlogIndexRouteImport
      parentRoute: typeof Char123LocaleChar125BlogRouteRoute
    }
    '/{-$locale}/blog/$slug': {
      id: '/{-$locale}/blog/$slug'
      path: '/$slug'
      fullPath: '/{-$locale}/blog/$slug'
      preLoaderRoute: typeof Char123LocaleChar125BlogSlugRouteImport
      parentRoute: typeof Char123LocaleChar125BlogRouteRoute
    }
  }
}

interface Char123LocaleChar125BlogRouteRouteChildren {
  Char123LocaleChar125BlogSlugRoute: typeof Char123LocaleChar125BlogSlugRoute
  Char123LocaleChar125BlogIndexRoute: typeof Char123LocaleChar125BlogIndexRoute
}

const Char123LocaleChar125BlogRouteRouteChildren: Char123LocaleChar125BlogRouteRouteChildren =
  {
    Char123LocaleChar125BlogSlugRoute: Char123LocaleChar125BlogSlugRoute,
    Char123LocaleChar125BlogIndexRoute: Char123LocaleChar125BlogIndexRoute,
  }

const Char123LocaleChar125BlogRouteRouteWithChildren =
  Char123LocaleChar125BlogRouteRoute._addFileChildren(
    Char123LocaleChar125BlogRouteRouteChildren,
  )

interface Char123LocaleChar125RouteRouteChildren {
  Char123LocaleChar125BlogRouteRoute: typeof Char123LocaleChar125BlogRouteRouteWithChildren
  Char123LocaleChar125AboutRoute: typeof Char123LocaleChar125AboutRoute
  Char123LocaleChar125OptimizeRoute: typeof Char123LocaleChar125OptimizeRoute
  Char123LocaleChar125IndexRoute: typeof Char123LocaleChar125IndexRoute
}

const Char123LocaleChar125RouteRouteChildren: Char123LocaleChar125RouteRouteChildren =
  {
    Char123LocaleChar125BlogRouteRoute:
      Char123LocaleChar125BlogRouteRouteWithChildren,
    Char123LocaleChar125AboutRoute: Char123LocaleChar125AboutRoute,
    Char123LocaleChar125OptimizeRoute: Char123LocaleChar125OptimizeRoute,
    Char123LocaleChar125IndexRoute: Char123LocaleChar125IndexRoute,
  }

const Char123LocaleChar125RouteRouteWithChildren =
  Char123LocaleChar125RouteRoute._addFileChildren(
    Char123LocaleChar125RouteRouteChildren,
  )

const rootRouteChildren: RootRouteChildren = {
  Char123LocaleChar125RouteRoute: Char123LocaleChar125RouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
